/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Dialog } from '@mui/material';
import { styled } from '@mui/material/styles';
import Breadcrumbs from './Breadcrumbs';
import ProductCard from './ProductCard';
import PaymentCard from './PaymentCard';
import useProductsPage from './useProductsPage';
 
const ProductsPopUp = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  flexDirection: `column`,  
  height: `1018px`,  
  width: "100vw",  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  gap: `10px`,  
  padding: `10px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
});
  
const Page = styled("div")({  
  display: `flex`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  gap: `10px`,  
  padding: `10px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  flexGrow: `1`,  
  overflow: `hidden`,  
});
  
const Content = styled("div")({  
  display: `flex`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `120px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  flexGrow: `1`,  
});
  
const Sec1 = styled("div")({  
  display: `flex`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `22px 60px 0px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
});
  
const Breadcrumbs1 = styled(Breadcrumbs)(({ theme }) =>({  
  alignSelf: `stretch`,  
}));
  
const Sec3 = styled("div")({  
  display: `flex`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  gap: `20px`,  
  padding: `0px 61px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
});
  
const Items = styled("div")({  
  display: `flex`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  gap: `30px`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
});
  
const ProductCard1 = styled(ProductCard)(({ theme }) =>({  
  flexGrow: `1`,  
}));
  
const PaymentCard1 = styled(PaymentCard)(({ theme }) =>({  
  height: `574px`,  
  width: `728px`,  
}));
 
function ProductsPage() {
  const {data, fns} = useProductsPage();
  return (
    <ProductsPopUp >
       <Page >
         <Content >
           <Sec1 >
             <Breadcrumbs1   />
           </Sec1>
           <Sec3 >
             <Items >
               {data.products && data.products.map((product, index) => {
                 return (
                   <ProductCard1  key={index}  product={product} buyClicked={() => fns.buyClicked(product)}/>
                 )
               })}
             </Items>
           </Sec3>
         </Content>
       </Page>
       <Dialog open={data.showPayment} onClose={fns.closePaymentDialog} maxWidth={"1000px"}>
         <PaymentCard1   product={data.selectedProduct} onClose={fns.closePaymentDialog}/>
       </Dialog>
     </ProductsPopUp>
   );
}

export default ProductsPage;
